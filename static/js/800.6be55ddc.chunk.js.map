{"version":3,"file":"static/js/800.6be55ddc.chunk.js","mappings":"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","sources":["components/Contacts/index.tsx","components/context/AppContext.tsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport emailjs from 'emailjs-com';\r\nimport { useForm } from 'react-hook-form';\r\nimport UserContext from '../context/AppContext';\r\n\r\ntype TFormData = {name: string, phone: string, email: string, subject: string, description: string}\r\n\r\nconst Contacts: React.FC   = () => {\r\n  \r\n  const context = useContext(UserContext)\r\n  const MContacts = context.state.messages.Contacts \r\n  \r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const serviceID = 'service_dwcig0p';\r\n  const templateID = 'template_cnrxm1m';\r\n  const userID = 'user_71i8cGIfIVtKX7hse4aEV';\r\n\r\n  const onSubmit = (data:TFormData , formElement: any) => {\r\n    sendEmail(\r\n      serviceID,\r\n      templateID,\r\n      {\r\n        name: data.name,\r\n        phone: data.phone,\r\n        email: data.email,\r\n        subject: data.subject,\r\n        description: data.description,\r\n      },\r\n      userID\r\n    );\r\n\r\n    formElement.target.reset();\r\n  };\r\n\r\n  const sendEmail = (serviceID: string, templateID: string, variables: Object | undefined, userID: string | undefined) => {\r\n    emailjs\r\n      .send(serviceID, templateID, variables, userID)\r\n      .then(() => {\r\n        setSuccessMessage(\r\n          MContacts.form.formSucess\r\n        );\r\n      })\r\n      .catch((err) => console.error(`Something went wrong ${err}`));\r\n  };\r\n\r\n  return (\r\n    <section id='contacts' className='contacts'>\r\n      <div className='text-center'>\r\n        <h1>\r\n          {MContacts.title} <span className='dot'>.</span>\r\n        </h1>\r\n        <p>\r\n          {MContacts.text}\r\n        </p>\r\n        <span className='success-message'>{successMessage}</span>\r\n      </div>\r\n      <div className='container'>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div className='row'>\r\n            <div className='col-md-6 col-xs-12'>\r\n              {/* NAME INPUT */}\r\n              <div className='text-center'>\r\n                <input\r\n                  type='text'\r\n                  className='form-control'\r\n                  placeholder={MContacts.form.name}\r\n                  name='name'\r\n                  ref={register({\r\n                    required: MContacts.form.nameRequired,\r\n                    maxLength: {\r\n                      value: 20,\r\n                      message: MContacts.form.nameMsg,\r\n                    },\r\n                  })}\r\n                />\r\n                <div className='line'></div>\r\n              </div>\r\n              <span className='error-message'>\r\n                {errors.name && errors.name.message}\r\n              </span>\r\n              {/* PHONE INPUT */}\r\n              <div className='text-center'>\r\n                <input\r\n                  type='text'\r\n                  className='form-control'\r\n                  placeholder={MContacts.form.phone}\r\n                  name='phone'\r\n                  ref={register({\r\n                    required: MContacts.form.phoneRequired,\r\n                    pattern: {\r\n                      value: /^[0-9]+$/,\r\n                      message: MContacts.form.phoneMsg,\r\n                    },\r\n                  })}\r\n                />\r\n                <div className='line'></div>\r\n              </div>\r\n              <span className='error-message'>\r\n                {errors.phone && errors.phone.message}\r\n              </span>\r\n              {/* EMAIL INPUT */}\r\n              <div className='text-center'>\r\n                <input\r\n                  type='email'\r\n                  className='form-control'\r\n                  placeholder={MContacts.form.email}\r\n                  name='email'\r\n                  ref={register({\r\n                    required: MContacts.form.emailRequired,\r\n                    pattern: {\r\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                      message: MContacts.form.phoneMsg,\r\n                    },\r\n                  })}\r\n                />\r\n                <div className='line'></div>\r\n              </div>\r\n              <span className='error-message'>\r\n                {errors.email && errors.email.message}\r\n              </span>\r\n              {/* SUBJECT INPUT */}\r\n              <div className='text-center'>\r\n                <input\r\n                  type='text'\r\n                  className='form-control'\r\n                  placeholder={MContacts.form.sub}\r\n                  name='subject'\r\n                  ref={register({\r\n                    required: MContacts.form.subRequired,\r\n                  })}\r\n                />\r\n                <div className='line'></div>\r\n              </div>\r\n              <span className='error-message'>\r\n                {errors.subject && errors.subject.message}\r\n              </span>\r\n            </div>\r\n            <div className='col-md-6 col-xs-12'>\r\n              {/* DESCRIPTION */}\r\n              <div className='text-center'>\r\n                <textarea              \r\n                  className='form-control'\r\n                  placeholder={MContacts.form.description}\r\n                  name='description'\r\n                  ref={register({\r\n                    required: MContacts.form.descriptionRequired,\r\n                  })}\r\n                ></textarea>\r\n                <div className='line'></div>\r\n              </div>\r\n              <span className='error-message'>\r\n                {errors.description && errors.description.message}\r\n              </span>\r\n              <button className='btn-main-offer contact-btn' type='submit'>\r\n                {MContacts.button}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React, { createContext, useState } from \"react\";\r\nimport messages_br from \"../../messages/texts-pt-br.json\"\r\n\r\n\r\n// user props type\r\ntype UserType = {\r\n  language: string\r\n  messages: any\r\n}\r\n\r\n// context props type\r\ntype PropsUserContext ={\r\n  state: UserType,\r\n  setState: React.Dispatch<React.SetStateAction<UserType>>\r\n}\r\n\r\n//initial state value\r\nconst DEFAULT_VALUE = {\r\n    state: {\r\n        language: \"pt-BR\",\r\n        messages: messages_br,\r\n    },\r\n    setState: () => {},\r\n}\r\n\r\n//create context\r\nconst UserContext = createContext<PropsUserContext>(DEFAULT_VALUE);\r\n\r\n//function to change language of the context\r\nconst UserContextProvider: React.FC = ({ children }) => {\r\n  const [state, setState] = useState(DEFAULT_VALUE.state);\r\n  return (\r\n    <UserContext.Provider\r\n      value={{\r\n        state,\r\n        setState,\r\n      }}\r\n    >\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport { UserContextProvider };\r\nexport default UserContext;"],"names":["MContacts","useContext","UserContext","state","messages","Contacts","useState","successMessage","setSuccessMessage","useForm","register","handleSubmit","errors","sendEmail","serviceID","templateID","variables","userID","emailjs","then","form","formSucess","catch","err","console","error","id","className","title","text","onSubmit","data","formElement","name","phone","email","subject","description","target","reset","type","placeholder","ref","required","nameRequired","maxLength","value","message","nameMsg","phoneRequired","pattern","phoneMsg","emailRequired","sub","subRequired","descriptionRequired","button","DEFAULT_VALUE","language","messages_br","setState","createContext","UserContextProvider","children","Provider"],"sourceRoot":""}